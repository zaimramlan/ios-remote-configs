//
//  RevealQuestionInteractor.swift
//  RemoteConfigs
//
//  Created by Zaim Ramlan on 29/04/2018.
//  Copyright (c) 2018 ZaimRamlan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RevealQuestionBusinessLogic {
  func fetchFromDataStore(with request: RevealQuestionModels.FetchFromDataStore.Request)
  func RevealQuestion(with request: RevealQuestionModels.RevealQuestion.Request)
}

protocol RevealQuestionDataStore {
  var attribute: String? { get set }
}

class RevealQuestionInteractor: RevealQuestionBusinessLogic, RevealQuestionDataStore {
  var worker: RevealQuestionWorker?
  var presenter: RevealQuestionPresentationLogic?
  
  var attribute: String?

  // MARK: Fetch Data From DataStore
  
  func fetchFromDataStore(with request: RevealQuestionModels.FetchFromDataStore.Request) {
    attribute = ""
    let response = RevealQuestionModels.FetchFromDataStore.Response(userAttribute: attribute!)
    presenter?.presentFetchFromDataStoreResult(with: response)
  }
  
  // MARK: Use Case - RevealQuestion
  
  func RevealQuestion(with request: RevealQuestionModels.RevealQuestion.Request) {

    var isError = false
    var variablePassed = RevealQuestionModels.VariablePassed()

    // MARK: Empty variablePassed Check

    if request.variableToPass == nil {
      isError = true
      variablePassed.errorMessage = "Some localised empty/nil error message string."
    }

    if isError {
      let response = RevealQuestionModels.RevealQuestion.Response(containsErrors: true, genericErrorMessage: nil, variablePassed: variablePassed)
      presenter?.presentRevealQuestionResult(with: response)
      return
    }

    // MARK: Execute Use Case

    worker = RevealQuestionWorker()
    worker?.RevealQuestion(completionHandler: { (isSuccessful, errorMessage) in
      if isSuccessful {
        self.attribute = request.variableToPass!
        
        let response = RevealQuestionModels.RevealQuestion.Response(containsErrors: false, genericErrorMessage: nil, variablePassed: variablePassed)
        self.presenter?.presentRevealQuestionResult(with: response)
      }
      else {
        let response = RevealQuestionModels.RevealQuestion.Response(containsErrors: true, genericErrorMessage: errorMessage, variablePassed: variablePassed)
        self.presenter?.presentRevealQuestionResult(with: response)
      }
    })
  }
}
