//
//  RevealQuestionInteractor.swift
//  RemoteConfigs
//
//  Created by Zaim Ramlan on 29/04/2018.
//  Copyright (c) 2018 ZaimRamlan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RevealQuestionBusinessLogic {
  func RevealQuestion(with request: RevealQuestionModels.RevealQuestion.Request)
  func SubmitAnswer(with request: RevealQuestionModels.SubmitAnswer.Request)
}

protocol RevealQuestionDataStore {
  var question: String? { get set }
  var answer: String? { get set }
}

class RevealQuestionInteractor: RevealQuestionBusinessLogic, RevealQuestionDataStore {
  var worker: RevealQuestionWorker? = RevealQuestionWorker()
  var presenter: RevealQuestionPresentationLogic?
  var question: String?
  var answer: String?
  
  // MARK: Use Case - Reveal Question
  
  func RevealQuestion(with request: RevealQuestionModels.RevealQuestion.Request) {
    
    // fetch and activate config values
    let remoteConfig = (UIApplication.shared.delegate as? AppDelegate)?.remoteConfig
    remoteConfig?.fetch(withExpirationDuration: 1, completionHandler: { (status, error) in
      remoteConfig?.activateFetched()
      
      self.question = remoteConfig?.configValue(forKey: ConfigConstants.questionOfTheDay).stringValue
      self.answer   = remoteConfig?.configValue(forKey: ConfigConstants.answerOfTheDay).stringValue
      
      let response = RevealQuestionModels.RevealQuestion.Response(question: self.question)
      self.presenter?.presentRevealQuestionResult(with: response)
    })
  }
  
  func SubmitAnswer(with request: RevealQuestionModels.SubmitAnswer.Request) {
    var isCorrect = false
    if let actualAnswer = request.answer?.lowercased().trimmingCharacters(in: .whitespacesAndNewlines),
       let expectedAnswer = self.answer?.lowercased().trimmingCharacters(in: .whitespacesAndNewlines),
       actualAnswer.elementsEqual(expectedAnswer) {
      
      isCorrect = true
    }
    
    let response = RevealQuestionModels.SubmitAnswer.Response(isCorrect: isCorrect)
    presenter?.presentSubmitAnswerResult(with: response)
  }
}
