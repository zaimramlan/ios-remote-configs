//
//  RevealQuestionViewController.swift
//  RemoteConfigs
//
//  Created by Zaim Ramlan on 29/04/2018.
//  Copyright (c) 2018 ZaimRamlan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RevealQuestionDisplayLogic: class {
  func displayRevealQuestionResult(with viewModel: RevealQuestionModels.RevealQuestion.ViewModel)
  func displaySubmitAnswerResult(with viewModel: RevealQuestionModels.SubmitAnswer.ViewModel)
}

class RevealQuestionViewController: UIViewController, RevealQuestionDisplayLogic {

  // MARK: Properties

  var router: (NSObjectProtocol & RevealQuestionRoutingLogic & RevealQuestionDataPassing)?
  var interactor: RevealQuestionBusinessLogic?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = RevealQuestionInteractor()
    let presenter = RevealQuestionPresenter()
    let router = RevealQuestionRouter()

    viewController.router = router
    viewController.interactor = interactor
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: View Lifecycle

  override func viewDidLoad() {
    super.viewDidLoad()
    hideQuestionView(.withoutAnimation)
  }
  
  // MARK: Question View
  
  @IBOutlet var questionLabel: UILabel!
  @IBOutlet var answerTF: UITextField!
  func showQuestionView(_ toggleType: RevealQuestionModels.ToggleViewType) {
    switch toggleType {
    case .withAnimation:
      UIView.animate(withDuration: 0.5) {
        self.setQuestionView(alpha: 1.0)
      }
      
    case .withoutAnimation:
      self.setQuestionView(alpha: 1.0)
    }
  }

  func hideQuestionView(_ toggleType: RevealQuestionModels.ToggleViewType) {
    switch toggleType {
    case .withAnimation:
      UIView.animate(withDuration: 0.5) {
        self.setQuestionView(alpha: 0)
      }
      
    case .withoutAnimation:
      self.setQuestionView(alpha: 0)
    }
  }
  
  func setQuestionView(alpha: CGFloat) {
    questionLabel.alpha = alpha
    answerTF.alpha = alpha
    submitAnswerButton.alpha = alpha
  }

  // MARK: Use Case - Reveal Question

  @IBOutlet var revealQuestionButton: UIButton!
  @IBAction func revealQuestionButtonClicked(_ sender: Any) {
    hideQuestionView(.withAnimation)
    
    let request = RevealQuestionModels.RevealQuestion.Request()
    interactor?.RevealQuestion(with: request)
  }

  func displayRevealQuestionResult(with viewModel: RevealQuestionModels.RevealQuestion.ViewModel) {
    questionLabel.text = viewModel.question
    showQuestionView(.withAnimation)
  }
  
  // MARK: Use Case - Submit Answer
  
  @IBOutlet var submitAnswerButton: UIButton!
  @IBAction func submitAnswerButtonClicked(_ sender: Any) {
    let answer = answerTF.text
    let request = RevealQuestionModels.SubmitAnswer.Request(answer: answer)
    interactor?.SubmitAnswer(with: request)
  }
  
  func displaySubmitAnswerResult(with viewModel: RevealQuestionModels.SubmitAnswer.ViewModel) {
    var title, message, buttonTitle: String?
    
    if viewModel.isCorrect {
      title = "Correct ✅"
      message = "Your answer is correct!"
      buttonTitle = "Awesome"
    }
    else {
      title = "Incorrect ❌"
      message = "Oops, your answer is incorrect! Please try again."
      buttonTitle = "Definitely"
    }
    
    let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
    alert.addAction(UIAlertAction.init(title: buttonTitle, style: UIAlertActionStyle.default, handler: nil))
    navigationController?.present(alert, animated: true, completion: nil)
  }
}
